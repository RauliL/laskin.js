#!/usr/bin/env node

const fs = require("fs");
const { stdin, stdout } = require("process");
const readline = require("readline");

const { Context, LaskinError } = require("../dist");

const countOpenBraces = (stack, line) => {
  for (let i = 0; i < line.length; ++i) {
    const c = line[i];

    switch (c) {
      case "#":
        return;

      case "(":
        stack.push(")");
        break;

      case "[":
        stack.push("]");
        break;

      case "{":
        stack.push("}");
        break;

      case ")":
      case "]":
      case "}":
        if (stack.length > 0 && stack[stack.length - 1] === c) {
          stack.pop();
        }
        break;

      case '"':
      case "'":
        ++i;
        while (i < line.length) {
          if (line[i] === c) {
            break;
          } else if (
            line[i] === "\\" &&
            i + 1 < line.length &&
            line[i + 1] === c
          ) {
            i += 2;
          } else {
            ++i;
          }
        }
        break;
    }
  }
};

const runInteractively = (context) => {
  const rl = readline.createInterface({
    input: stdin,
    output: stdout,
  });
  let currentLine = 0;
  const openBraces = [];
  let source = "";
  const prompt = () => {
    ++currentLine;
    rl.question(
      `laskin:${currentLine}:${context.data.length}${
        openBraces.length > 0 ? "*" : ">"
      } `,
      (line) => {
        if (/^\s*\.?(exit|quit)\s*$/i.test(line)) {
          process.exit(0);
          return;
        }

        source += line;
        source += "\n";
        countOpenBraces(openBraces, line);

        if (openBraces.length === 0) {
          try {
            context.exec(
              source,
              (text) => process.stdout.write(`${text}\n`),
              currentLine,
            );
          } catch (e) {
            if (e instanceof LaskinError) {
              process.stdout.write(`${e}\n`);
            } else {
              throw e;
            }
          } finally {
            source = "";
          }
        }

        prompt();
      },
    );
  };

  prompt();
};

const runFile = (context, path) => {
  const source = fs.readFileSync(path, "utf8").toString();

  context.exec(source, (text) => process.stdout.write(`${text}\n`));
};

(() => {
  const context = new Context();

  if (process.argv.length > 2) {
    process.argv.slice(2).forEach((filename) => {
      runFile(context, filename);
    });
  } else {
    runInteractively(context);
  }
})();
